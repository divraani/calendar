import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(CalendarApp());
}

class CalendarApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'UCSC Calendar',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: CalendarScreen(),
    );
  }
}

class CalendarScreen extends StatefulWidget {
  @override
  _CalendarScreenState createState() => _CalendarScreenState();
}

class _CalendarScreenState extends State<CalendarScreen> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _selectedDay = DateTime.now();
  DateTime _focusedDay = DateTime.now();

  final TextEditingController _eventController = TextEditingController();
  Map<String, List<String>> _events = {};

  // Example assignments (Canvas-style)
  Map<String, Map<String, dynamic>> _assignments = {
    'Math HW1': {
      'deadline': DateTime.now().add(Duration(days: 2)),
      'estimatedHours': 3,
    },
    'CS Project': {
      'deadline': DateTime.now().add(Duration(days: 5)),
      'estimatedHours': 5,
    },
    'Physics Lab': {
      'deadline': DateTime.now().add(Duration(days: 1, hours: 12)),
      'estimatedHours': 2,
    },
  };

  @override
  Widget build(BuildContext context) {
    String selectedDateKey = _selectedDay.toIso8601String().split('T')[0];
    List<String> eventsForDay = _events[selectedDateKey] ?? [];

    return Scaffold(
      appBar: AppBar(
        title: Text('UCSC Calendar 🐌'),
        actions: [
          IconButton(
            icon: Icon(Icons.today),
            onPressed: () {
              setState(() {
                _selectedDay = DateTime.now();
                _focusedDay = DateTime.now();
              });
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // Calendar
          TableCalendar(
            firstDay: DateTime.utc(2020, 1, 1),
            lastDay: DateTime.utc(2030, 12, 31),
            focusedDay: _focusedDay,
            selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
            onDaySelected: (selectedDay, focusedDay) {
              setState(() {
                _selectedDay = selectedDay;
                _focusedDay = focusedDay;
              });
            },
            calendarFormat: _calendarFormat,
            onFormatChanged: (format) {
              setState(() {
                _calendarFormat = format;
              });
            },
            calendarStyle: CalendarStyle(
              todayDecoration: BoxDecoration(
                color: Colors.blue[700],
                shape: BoxShape.circle,
              ),
              selectedDecoration: BoxDecoration(
                color: Colors.yellow[700],
                shape: BoxShape.circle,
              ),
            ),
          ),

          // Event input
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _eventController,
                    decoration: InputDecoration(
                      labelText: 'Event',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                SizedBox(width: 8),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue[700],
                  ),
                  child: Text('Add'),
                  onPressed: () {
                    if (_eventController.text.isEmpty) return;
                    setState(() {
                      _events.putIfAbsent(selectedDateKey, () => []);
                      _events[selectedDateKey]!.add(_eventController.text);
                      _eventController.clear();
                    });
                  },
                )
              ],
            ),
          ),

          // Events List
          Expanded(
            child: ListView.builder(
              itemCount: eventsForDay.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(eventsForDay[index]),
                  trailing: IconButton(
                    icon: Icon(Icons.delete, color: Colors.red),
                    onPressed: () {
                      setState(() {
                        _events[selectedDateKey]!.removeAt(index);
                      });
                    },
                  ),
                );
              },
            ),
          ),

          // Upcoming Deadlines
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              'Upcoming Deadlines',
              style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF003399)),
            ),
          ),
          Container(
            height: 100,
            child: ListView(
              scrollDirection: Axis.horizontal,
              children: _assignments.entries.map((entry) {
                String name = entry.key;
                DateTime deadline = entry.value['deadline'];
                int estHours = entry.value['estimatedHours'];

                // Calculate suggested start date
                DateTime suggestedStart = deadline.subtract(Duration(hours: estHours));

                bool overdue = DateTime.now().isAfter(deadline);

                return Container(
                  width: 160,
                  margin: EdgeInsets.only(right: 8),
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: overdue ? Colors.red[200] : Colors.blue[100],
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(color: Colors.blueAccent),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(name,
                          style: TextStyle(fontWeight: FontWeight.bold),
                          overflow: TextOverflow.ellipsis),
                      SizedBox(height: 4),
                      Text('Deadline: ${DateFormat('MM/dd').format(deadline)}'),
                      Text('Start by: ${DateFormat('MM/dd HH:mm').format(suggestedStart)}'),
                    ],
                  ),
                );
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }
}


Instructions: 
Step 1: Make sure Flutter is installed and on PATH

Open a terminal in VS Code (Ctrl + on Windows or Cmd + on Mac`).

Run:

flutter --version


You should see Flutter version info.

If it says command not found, make sure Flutter’s bin folder is added to your system PATH (you can follow the Flutter installation guide
).

Step 2: Install Flutter & Dart extensions in VS Code

Open VS Code → Extensions (Cmd+Shift+X / Ctrl+Shift+X)

Search for:

Flutter

Dart

Click Install for both.

Step 3: Create a new Flutter project

Open the VS Code Command Palette (Cmd+Shift+P / Ctrl+Shift+P) → type Flutter: New Project → select it.

Name your project (e.g., my_calendar_app) and pick a folder.

VS Code will generate a starter Flutter project with the default main.dart.

Alternatively, in terminal:

flutter create my_calendar_app
cd my_calendar_app
code .

Step 4: Replace main.dart

Navigate to lib/main.dart in your new Flutter project.

Delete all existing code and paste the full code I gave you.

Save the file (Cmd+S / Ctrl+S).

Step 5: Run the app

Make sure you have a device connected:

Physical phone via USB (with developer mode enabled)

Emulator / Simulator: open from Android Studio AVD or iOS Simulator

In VS Code:

At the bottom-right, select your device/emulator.

Press F5 or click Run → Start Debugging.

VS Code will build the Flutter app and launch it on your device/emulator. You should see your UCSC-themed calendar with event input and upcoming deadlines.

Step 6: Hot reload while editing

Make changes in main.dart → press r in terminal or the Hot Reload button in VS Code.

Your app updates instantly without restarting.

Step 7: Optional improvements

Add more assignments/events to see the horizontal Canvas scroll

Adjust colors, fonts, or layout for UCSC theme


Error correction:
Ah! That error is expected when Flutter can’t find the packages you imported (table_calendar and intl). You haven’t added them to your project yet. Flutter doesn’t automatically include external packages—you need to install them via pubspec.yaml.

Here’s how to fix it:

Step 1: Open pubspec.yaml

In VS Code, open the file at the root of your Flutter project: pubspec.yaml.

Step 2: Add dependencies

Find the section called dependencies: and add these lines under it (make sure it’s indented correctly—2 spaces):

dependencies:
  flutter:
    sdk: flutter
  table_calendar: ^3.0.9
  intl: ^0.18.1


Versions may vary; these are the latest as of now.

Make sure it looks like this with proper indentation:

dependencies:
  flutter:
    sdk: flutter
  table_calendar: ^3.0.9
  intl: ^0.18.1

Step 3: Install packages

Open a terminal in VS Code.

Run:

flutter pub get


This downloads table_calendar and intl into your project.

Step 4: Re-run your app

Press F5 in VS Code or run:

flutter run


The errors about table_calendar and intl should disappear.

✅ Tip: Always run flutter pub get whenever you add a new package to pubspec.yaml.
