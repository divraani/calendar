import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(CalendarApp());
}

class CalendarApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'UCSC Calendar',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: CalendarScreen(),
    );
  }
}

class CalendarScreen extends StatefulWidget {
  @override
  _CalendarScreenState createState() => _CalendarScreenState();
}

class _CalendarScreenState extends State<CalendarScreen> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _selectedDay = DateTime.now();
  DateTime _focusedDay = DateTime.now();

  final TextEditingController _eventController = TextEditingController();
  Map<String, List<String>> _events = {};
  Map<String, List<String>> _activities = {}; // Activity tracking

  // Example assignments
  Map<String, Map<String, dynamic>> _assignments = {
    'Math HW1': {
      'deadline': DateTime.now().add(Duration(days: 2)),
      'estimatedHours': 3,
    },
    'CS Project': {
      'deadline': DateTime.now().add(Duration(days: 5)),
      'estimatedHours': 5,
    },
    'Physics Lab': {
      'deadline': DateTime.now().add(Duration(days: 1, hours: 12)),
      'estimatedHours': 2,
    },
  };

  @override
  Widget build(BuildContext context) {
    String selectedDateKey = _selectedDay.toIso8601String().split('T')[0];
    List<String> eventsForDay = _events[selectedDateKey] ?? [];
    List<String> activitiesForDay = _activities[selectedDateKey] ?? [];

    return Scaffold(
      appBar: AppBar(
        title: Text('UCSC Calendar üêå'),
        actions: [
          IconButton(
            icon: Icon(Icons.today),
            onPressed: () {
              setState(() {
                _selectedDay = DateTime.now();
                _focusedDay = DateTime.now();
              });
            },
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.bar_chart),
        onPressed: () {
          // Weekly Summary
          DateTime startOfWeek =
          _focusedDay.subtract(Duration(days: _focusedDay.weekday - 1));
          int totalActivities = 0;
          for (int i = 0; i < 7; i++) {
            String dayKey =
            startOfWeek.add(Duration(days: i)).toIso8601String().split('T')[0];
            totalActivities += _activities[dayKey]?.length ?? 0;
          }
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: Text('Weekly Summary'),
              content: Text('You completed $totalActivities activities this week!'),
              actions: [
                TextButton(
                  child: Text('Close'),
                  onPressed: () => Navigator.pop(context),
                )
              ],
            ),
          );
        },
      ),
      body: Column(
        children: [
          // Calendar
          TableCalendar(
            firstDay: DateTime.utc(2020, 1, 1),
            lastDay: DateTime.utc(2030, 12, 31),
            focusedDay: _focusedDay,
            selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
            onDaySelected: (selectedDay, focusedDay) {
              setState(() {
                _selectedDay = selectedDay;
                _focusedDay = focusedDay;
              });
            },
            calendarFormat: _calendarFormat,
            onFormatChanged: (format) {
              setState(() {
                _calendarFormat = format;
              });
            },
            calendarStyle: CalendarStyle(
              todayDecoration: BoxDecoration(
                color: Colors.blue[700],
                shape: BoxShape.circle,
              ),
              selectedDecoration: BoxDecoration(
                color: Colors.yellow[700],
                shape: BoxShape.circle,
              ),
            ),
          ),

          // Event input
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _eventController,
                    decoration: InputDecoration(
                      labelText: 'Event / Activity',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                SizedBox(width: 8),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue[700],
                  ),
                  child: Text('Add Event'),
                  onPressed: () async {
                    if (_eventController.text.isEmpty) return;

                    // Pick time for event
                    TimeOfDay? pickedTime = await showTimePicker(
                      context: context,
                      initialTime: TimeOfDay.now(),
                    );

                    if (pickedTime == null) return;

                    DateTime eventDateTime = DateTime(
                      _selectedDay.year,
                      _selectedDay.month,
                      _selectedDay.day,
                      pickedTime.hour,
                      pickedTime.minute,
                    );

                    setState(() {
                      _events.putIfAbsent(selectedDateKey, () => []);
                      _events[selectedDateKey]!.add(
                        '${_eventController.text} at ${DateFormat('HH:mm').format(eventDateTime)}',
                      );
                      _eventController.clear();
                    });
                  },
                ),
                SizedBox(width: 8),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green[700],
                  ),
                  child: Text('Add Activity'),
                  onPressed: () {
                    if (_eventController.text.isEmpty) return;
                    setState(() {
                      _activities.putIfAbsent(selectedDateKey, () => []);
                      _activities[selectedDateKey]!.add(_eventController.text);
                      _eventController.clear();
                    });
                  },
                )
              ],
            ),
          ),

          // Daily Summary
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              'Daily Summary: ${activitiesForDay.length} activities today',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),

          // Events List
          Expanded(
            child: ListView(
              children: [
                // Events
                ...eventsForDay.map((e) => ListTile(
                  title: Text(e),
                  leading: Icon(Icons.event),
                  trailing: IconButton(
                    icon: Icon(Icons.delete, color: Colors.red),
                    onPressed: () {
                      setState(() {
                        _events[selectedDateKey]!.remove(e);
                      });
                    },
                  ),
                )),

                // Activities
                ...activitiesForDay.map((a) => ListTile(
                  title: Text(a),
                  leading: Icon(Icons.check_circle_outline),
                  trailing: IconButton(
                    icon: Icon(Icons.delete, color: Colors.red),
                    onPressed: () {
                      setState(() {
                        _activities[selectedDateKey]!.remove(a);
                      });
                    },
                  ),
                )),
              ],
            ),
          ),

          // Upcoming Deadlines
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              'Upcoming Deadlines',
              style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF003399)),
            ),
          ),
          Container(
            height: 100,
            child: ListView(
              scrollDirection: Axis.horizontal,
              children: _assignments.entries.map((entry) {
                String name = entry.key;
                DateTime deadline = entry.value['deadline'];
                int estHours = entry.value['estimatedHours'];

                DateTime suggestedStart = deadline.subtract(Duration(hours: estHours));

                bool overdue = DateTime.now().isAfter(deadline);

                return Container(
                  width: 160,
                  margin: EdgeInsets.only(right: 8),
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: overdue ? Colors.red[200] : Colors.blue[100],
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(color: Colors.blueAccent),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(name,
                          style: TextStyle(fontWeight: FontWeight.bold),
                          overflow: TextOverflow.ellipsis),
                      SizedBox(height: 4),
                      Text('Deadline: ${DateFormat('MM/dd').format(deadline)}'),
                      Text('Start by: ${DateFormat('MM/dd HH:mm').format(suggestedStart)}'),
                    ],
                  ),
                );
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }
}





















// Weekly Summary Section
Padding(
  padding: const EdgeInsets.all(8.0),
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        'üìÜ Weekly Summary',
        style: TextStyle(
          fontSize: 18,
          fontWeight: FontWeight.bold,
          color: Color(0xFF003399),
        ),
      ),
      SizedBox(height: 8),
      Builder(
        builder: (context) {
          DateTime now = DateTime.now();

          // Determine the start and end of this week (Monday to Sunday)
          DateTime startOfWeek = now.subtract(Duration(days: now.weekday - 1));
          DateTime endOfWeek = startOfWeek.add(Duration(days: 6));

          // Count events per day for this week
          Map<String, int> eventsPerDay = {};
          _events.forEach((dateKey, eventList) {
            DateTime date = DateTime.parse(dateKey);
            if (date.isAfter(startOfWeek.subtract(Duration(days: 1))) &&
                date.isBefore(endOfWeek.add(Duration(days: 1)))) {
              eventsPerDay[dateKey] = eventList.length;
            }
          });

          int totalEvents = eventsPerDay.values.fold(0, (a, b) => a + b);

          // Find the busiest day
          String busiestDay = 'N/A';
          if (eventsPerDay.isNotEmpty) {
            String maxKey = eventsPerDay.keys.first;
            for (var k in eventsPerDay.keys) {
              if (eventsPerDay[k]! > eventsPerDay[maxKey]!) {
                maxKey = k;
              }
            }
            busiestDay = DateFormat('EEEE').format(DateTime.parse(maxKey));
          }

          // Generate summary text
          String summaryText = totalEvents == 0
              ? "No events added this week. Time to plan ahead!"
              : "You added $totalEvents events this week. "
                "Your busiest day was $busiestDay.";

          return Container(
            width: double.infinity,
            padding: EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue[50],
              borderRadius: BorderRadius.circular(10),
              border: Border.all(color: Colors.blueAccent),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(summaryText,
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.blue[900],
                    )),
                SizedBox(height: 8),
                if (totalEvents > 0)
                  Wrap(
                    spacing: 8,
                    children: eventsPerDay.entries.map((e) {
                      String weekday =
                          DateFormat('E').format(DateTime.parse(e.key));
                      return Chip(
                        backgroundColor: Colors.blue[100],
                        label: Text('$weekday: ${e.value}'),
                      );
                    }).toList(),
                  ),
              ],
            ),
          );
        },
      ),
    ],
  ),
),
